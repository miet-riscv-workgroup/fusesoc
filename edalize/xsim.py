import os
import logging

from edalize.edatool import Edatool

logger = logging.getLogger(__name__)

class Xsim(Edatool):

    tool_options = {'lists' : {'xelab_options' : 'String',
                               'xsim_options'  : 'String'}}

    argtypes = ['plusarg', 'vlogdefine', 'vlogparam']

    MAKEFILE_TEMPLATE="""#Auto generated by Edalize
include config.mk

all: xsim.dir/$(TARGET)/xsimk

ip:
	vivado -mode batch -source $(IP_PROJ)
	{ip_xvlog_prj}
	{ip_xvhdl_prj}
	{ip_glbl}

xsim.dir/$(TARGET)/xsimk:
	xelab $(TOPLEVEL) -prj $(TARGET).prj -snapshot $(TARGET) $(VLOG_DEFINES) $(VLOG_INCLUDES) $(VLOG_PARAMS) $(XELAB_OPTIONS)

run: xsim.dir/$(TARGET)/xsimk
	xsim --tclbatch run.tcl $(XSIM_OPTIONS) $(TARGET) $(EXTRA_OPTIONS)

run-gui: xsim.dir/$(TARGET)/xsimk
	xsim --gui --tclbatch run-gui.tcl $(XSIM_OPTIONS) $(TARGET) $(EXTRA_OPTIONS)
"""

    GEN_IP_TEMPLATE = """#Autogenerated by Edalize
create_project {ip_prj_name}
set_property "simulator_languadge" "Mixed" [current_project]
{ip_prj_read_ip}
upgrade_ip [get_ips]
{ip_prj_gen_ip}
{ip_prj_launch_runs}
{ip_prj_wait_ip}
{ip_prj_export_ip}
"""

    CONFIG_MK_TEMPLATE = """#Auto generated by Edalize
TARGET        = {target}
TOPLEVEL      = {toplevel}

VLOG_DEFINES  = {vlog_defines}
VLOG_INCLUDES = {vlog_includes}
VLOG_PARAMS   = {vlog_params}

XELAB_OPTIONS =	{xelab_options}
XSIM_OPTIONS  = {xsim_options}
"""

    RUN_TCL_TEMPLATE = """#Auto generated by Edalize
run all
quit
"""

    RUN_GUI_TCL_TEMPLATE = """#Auto generated by Edalize
add_wave -radix hex /
run all
"""

    def configure_main(self):
        self._write_config_files()

        #Check if any VPI modules are present and display warning
        if len(self.vpi_modules) > 0:
            modules = [m['name'] for m in self.vpi_modules]
            logger.error('VPI modules not supported by Xsim: %s' % ', '.join(modules))

    def _write_config_files(self):

        # process IP products and design files with 'xvlog' and 'xvhdl'
        (src_files, self.incdirs) = self._get_fileset_files()
        for src_file in src_files:


        with open(os.path.join(self.work_root, self.name+'.prj'),'w') as f:
            (src_files, self.incdirs) = self._get_fileset_files()
            for src_file in src_files:

                cmd = ""
                if src_file.file_type.startswith("verilogSource"):
                    cmd = 'verilog'
                elif src_file.file_type == 'vhdlSource-2008':
                    cmd = 'vhdl2008'
                elif src_file.file_type.startswith("vhdlSource"):
                    cmd = 'vhdl'
                elif src_file.file_type.startswith("systemVerilogSource"):
                    cmd = 'sv'
                elif src_file.file_type in ["user"]:
                    pass
                else:
                    _s = "{} has unknown file type '{}'"
                    logger.warning(_s.format(src_file.name, src_file.file_type))
                if cmd:
                    if src_file.logical_name:
                        lib = src_file.logical_name
                    else:
                        lib = 'work'
                    f.write('{} {} {}\n'.format(cmd, lib, src_file.name))

        with open(os.path.join(self.work_root, 'config.mk'), 'w') as f:
            vlog_defines  = ' '.join(['--define {}={}'.format(k,v) for k,v, in self.vlogdefine.items()])
            vlog_includes = ' '.join(['-i '+k for k in self.incdirs])
            vlog_params   = ' '.join(['--generic_top {}={}'.format(k, self._param_value_str(v)) for k,v, in self.vlogparam.items()])
            xelab_options = ' '.join(self.tool_options.get('xelab_options', []))
            xsim_options  = ' '.join(self.tool_options.get('xsim_options' , []))

            f.write(self.CONFIG_MK_TEMPLATE.format(target=self.name,
                                                   toplevel=self.toplevel,
                                                   vlog_defines = vlog_defines,
                                                   vlog_includes = vlog_includes,
                                                   vlog_params   = vlog_params,
                                                   xelab_options = xelab_options,
                                                   xsim_options  = xsim_options))

        with open(os.path.join(self.work_root, 'run.tcl'), 'w') as f:
            f.write(self.RUN_TCL_TEMPLATE)
        with open(os.path.join(self.work_root, 'run-gui.tcl'), 'w') as f:
            f.write(self.RUN_GUI_TCL_TEMPLATE)

        with open(os.path.join(self.work_root, 'Makefile'), 'w') as f:

            # process IP products and design files with 'xvlog' and 'xvhdl'
            (src_files, self.incdirs) = self._get_fileset_files()
            for src_file in src_files:
                if src_file.file_type == 'xci':
                    ip_name = os.path.splitext(os.path.basename(src_file.name))[0]
                    vlog_prj  = os.path.join(self.work_root, ip_name , 'xsim', 'vlog.prj')
                    vhdl_prj  = os.path.join(self.work_root, ip_name , 'xsim', 'vhdl.prj')
                    glbl_file = os.path.join(self.work_root, ip_name , 'xsim', 'glbl.v')

                    if os.path.isfile(vlog_prj): ip_xvlog_prj += 'xvlog --prj {vlog_prj}\n'
                    if os.path.isfile(vhdl_prj): ip_xvhdl_prj += 'xvhdl --prj {vhdl_prj}\n'
                    if os.path.isfile(glbl_file): ip_glbl += 'xvlog {glbl_file}\n'

                f.write(self.MAKEFILE_TEMPLATE.format(
                    ip_xvlog_prj=ip_xvlog_prj,
                    ip_xvhdl_prj=ip_xvhdl_prj,
                    ip_glbl=ip_glbl)

        with open(os.path.join(self.work_root, 'generate_ip.tcl'), 'w') as f:
            # get all xci IP cores
            xci_ip = []
            (src_files, self.incdirs) = self._get_fileset_files(force_slash=True)
            for src_file in src_files:
                if src_file.file_type == 'xci':
                    xci_ip.append(src_file.name);

            # prepare data for template
            ip_dir = self.work_root
            for ip in xci_ip
                ip_name = os.path.splitext(os.path.basename(ip_name))[0]
                ip_export_dir = os.path.join(self.work_root, self.name + '_xci_sim.ip_user_files')

                read_ip     += '\nread_ip {ip}\n'
                generate_ip += '\ngenerate_target all [get_files {ip}]\n'
                export_ip   += '\nexport_ip_user_files -of_objects [get_files {ip}] -no_script -ip_user_files_dir {ip_dir} -force -quiet\n'
                run_ip      += '\ncreate_ip_run [get_files {ip}]\n'
                launch_ip   += '\nlaunch_runs {ip_name}_synth_1\n'
                wait_ip     += '\nwait_on_run {ip_name}_synth_1\n'
                export_ip   += '\nexport_simulation -directory {ip_export_dir} -simulator xsim -of_objects [get_files {ip_name}] -force -quiet\n'

                f.write(self.GEN_IP_TEMPLATE.format(
                    ip_prj_name = self.name + '_ip_prj',
                    ip_prj_read_ip = read_ip,
                    ip_prj_gen_ip = gen_ip,
                    ip_prj_launch_ip = launch_ip,
                    ip_prj_wait_ip = wait_ip,
                    ip_prj_export_ip = export_ip))

    def run_main(self):
        args = ['run']
        # Plusargs
        if self.plusarg:
            _s = '--testplusarg {}={}'
            args.append('EXTRA_OPTIONS='+' '.join([_s.format(k, v) for k,v in self.plusarg.items()]))

        self._run_tool('make', args)
